#!/usr/bin/bash

install-requirements() {
	echo "deb http://security.ubuntu.com/ubuntu impish-security main" | tee /etc/apt/sources.list.d/impish-security.list
	apt-get update
	apt-get install -y libssl1.1
	apt-get install -y openssl
	apt-get install -y pip
	apt-get install -y nmap
}

install-mongod() {
	wget -qO - https://www.mongodb.org/static/pgp/server-5.0.asc | apt-key add -
	echo "deb [ arch=amd64,arm64 ] https://repo.mongodb.org/apt/ubuntu focal/mongodb-org/5.0 multiverse" | tee /etc/apt/sources.list.d/mongodb-org-5.0.list
	apt-get update
	apt-get install -y mongodb-org
	systemctl enable mongod
}

install-nginx() {
	wget http://nginx.org/keys/nginx_signing.key
	apt-key add nginx_signing.key
	echo "deb http://nginx.org/packages/ubuntu focal nginx" >> /etc/apt/sources.list
	echo "deb-src http://nginx.org/packages/ubuntu focal nginx" >> /etc/apt/sources.list
	apt-get update
	apt-get install -y nginx
	systemctl enable nginx.service
	cp -a nginx/* /etc/nginx/
	sed -i "s|<server_name>|$1|g" /etc/nginx/sites-available/moonlan.conf
}

copy-template() {
	mkdir /etc/moonitor
	cp -a template/* /etc/moonitor/
	secret_key=$(openssl rand -hex 32)
	sed -i "s|<secret_key>|$secret_key|g" /etc/moonitor/api/config.json
	sed -i "s|<origin>|http://$1|g" /etc/moonitor/api/config.json
	sed -i "s|<gateway_ip>|$2|g" /etc/moonitor/api/config.json
	sed -i "s|<gateway_mac>|$3|g" /etc/moonitor/api/config.json
	sed -i "s|<network_subnet>|$4|g" /etc/moonitor/scan/config.json
}

install-ui() {
	git clone https://github.com/MoonfaceDev/moonitor-build.git /etc/moonitor/app
	find /etc/moonitor/app -type f -exec sed -i -e "s|<origin>|http://$1|g" {} \;
}

install-services() {
	pip install git+https://github.com/MoonfaceDev/moonlan.git
	pip install git+https://github.com/MoonfaceDev/moonscan.git
	cp -a services/* /etc/systemd/system/
	systemctl enable moonlan
	systemctl enable moonscan
}

start() {
	systemctl daemon-reload
	systemctl start moonscan
	systemctl start moonlan
	systemctl start mongod
	systemctl start nginx.service
	echo -e "\033[1;34mStarted services\033[0m"
}

restart() {
	systemctl daemon-reload
	systemctl restart moonscan
	systemctl restart moonlan
	systemctl restart mongod
	systemctl restart nginx.service
	echo -e "\033[1;34mRestarted services\033[0m"
}

stop() {
	systemctl stop moonscan
	systemctl stop moonlan
	systemctl stop mongod
	systemctl stop nginx.service
	echo -e "\033[1;34mStopped services\033[0m"
}

setup() {
	read -p 'Server hostname: ' hostname
	read -p 'Gateway IP: ' gateway_ip
	read -p 'Gateway MAC: ' gateway_mac
	read -p 'Network subnet: ' network_subnet
	iptables -I INPUT -j ACCEPT
	install-requirements
	echo -e "\033[1;34mInstalled linux requirements\033[0m"
	install-mongod
	echo -e "\033[1;34mInstalled MongoDB\033[0m"
	install-nginx "$hostname"
	echo -e "\033[1;34mInstalled Nginx\033[0m"
	copy-template "$hostname" "$gateway_ip" "$gateway_mac" "$network_subnet"
	echo -e "\033[1;34mCopied template files\033[0m"
	install-ui "$hostname"
	echo -e "\033[1;34mCopied moonitor UI files\033[0m"
	install-services
	echo -e "\033[1;34mInstalled service packages\033[0m"
	start
}

enable-user() {
	mongo --eval "db.users.update({\"email\":\"$1\"},{\$set:{\"disabled\":false}});" moonlan
}

help() {
	b="\033[1m"
	n="\033[0m"
	echo -e "Usage:"
	echo -e "\n  ./moonitor <command> [options]"
	echo -e "\n"
	echo -e "Commands:"
	echo -e "\n  ${b}help${n}\n      Show help for commands."
	echo -e "\n  install-requirements\n      Install required linux packages from apt."
	echo -e "\n  install-mongod\n      Install MongoDB package, enable systemd service."
	echo -e "\n  install-nginx <hostname>\n      Install nginx package, enable systemd service, copy server configuration files."
	echo -e "\n  copy-template <hostname> <gateway_ip> <gateway_mac> <network_subnet>\n      Copy configuration file templates, fill in given values."
	echo -e "\n  install-ui <hostname>\n      Install UI build files, fill in origin for API requests."
	echo -e "\n  install-services\n      Install moonscan and moonlan, enable matching services."
	echo -e "\n  start\n      Start all services."
	echo -e "\n  restart\n      Restart all services."
	echo -e "\n  stop\n      Stop all services."
	echo -e "\n  setup\n      Run setup wizard."
	echo -e "\n  enable-user <email>\n      Enable user with given email."
}

if [ $# -eq 0 ]
  then
  help
  exit 0
fi

"$@"
